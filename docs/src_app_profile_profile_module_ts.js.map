{"version":3,"file":"src_app_profile_profile_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;IAIAA,4DAAAA,UAA8C;IAAAA,oDAAAA,GAAsB;IAAAA,0DAAAA,EAAM;;;;IAA5BA,uDAAAA,GAAsB;IAAtBA,+DAAAA,qBAAsB;;;ACO9D,MAAOC,gBAAgB;EAC3BC,YAAoBC,KAAqB,EAAUC,MAAc,EAAUC,cAA8B;IAArF,UAAK,GAALF,KAAK;IAA0B,WAAM,GAANC,MAAM;IAAkB,mBAAc,GAAdC,cAAc;EAAmB;EAI5GC,eAAe;IACb,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,QAAQ;IACN,MAAMC,MAAM,GAAG,IAAI,CAACN,KAAK,CAACO,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAC;IACzD,IAAIH,MAAM,EAAE;MACV,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACR,cAAc,CAACS,UAAU,CAACL,MAAM,CAAC;;EAE1D;;;mBAdWR,gBAAgB;AAAA;;QAAhBA,gBAAgB;EAAAc;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDX7BnB,4DAAAA,QAAG;MAAAA,oDAAAA,qBAAc;MAAAA,0DAAAA,EAAI;MAIrBA,wDAAAA,oDAA0E;;MAE1EA,4DAAAA,gBAA4B;MAAAA,oDAAAA,eAAQ;MAAAA,0DAAAA,EAAS;MAC7CA,4DAAAA,gBAAyC;MAAjCA,wDAAAA;QAAA,OAASoB,qBAAsB;MAAA,EAAC;MAACpB,oDAAAA,eAAQ;MAAAA,0DAAAA,EAAS;;;MAHpDA,uDAAAA,GAA4B;MAA5BA,wDAAAA,SAAAA,yDAAAA,qBAA4B;;;;;;;;;;;;;;;;;;;;;;;AEHoB;AACmB;AACpB;;;AAErD,MAAM,MAAM,GAAW,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,mFAAgB,EAAE,WAAW,EAAE,CAAC,8DAAS,CAAC,EAAE,CAAC;AAM5F,MAAM,oBAAoB;;wFAApB,oBAAoB;iHAApB,oBAAoB;qHAHrB,kEAAqB,CAAC,MAAM,CAAC,EAC7B,yDAAY;mIAEX,oBAAoB,oFAFrB,yDAAY;;;;;;;;;;;;;;;;;;;;ACRsB;AAEiB;AACU;AACd;;AAOpD,MAAM,aAAa;;0EAAb,aAAa;0GAAb,aAAa;+GAFb,CAAC,qEAAc,CAAC,YADjB,yDAAY,EAAE,yEAAoB;mIAGjC,aAAa,mBAJT,mFAAgB,aACrB,yDAAY,EAAE,yEAAoB;;;;;;;;;;;;;;;;;;ACPiB;;;AAOxD,MAAM,cAAc;IACzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,UAAU,CAAC,EAAU;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,GAAG,iFAA0B,YAAY,EAAE,EAAE,CAAC;IAC9E,CAAC;;4EALU,cAAc;+GAAd,cAAc,WAAd,cAAc,mBAFb,IAAI","sources":["./src/app/profile/components/profile/profile.component.html","./src/app/profile/components/profile/profile.component.ts","./src/app/profile/profile-routing.module.ts","./src/app/profile/profile.module.ts","./src/app/profile/services/profile.service.ts"],"sourcesContent":["<p>profile works!</p>\n<!-- <div>{{ (this.profile$ | async)?.fullName }}</div> та не делают-->\n\n<!--или-->\n<div *ngIf=\"this.profile$ | async as profile\">{{ profile.fullName }}</div>\n\n<button routerLink=\"/users\">to users</button>\n<button (click)=\"this.navigateToUsers()\">to users</button>\n","import { Component, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { ProfileService } from '../../services/profile.service'\nimport { Observable } from 'rxjs'\nimport { Profile } from '../../models/profile.model'\n\n@Component({\n  selector: 'tdl-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent implements OnInit {\n  constructor(private route: ActivatedRoute, private router: Router, private profileService: ProfileService) {}\n\n  profile$!: Observable<Profile>\n\n  navigateToUsers() {\n    this.router.navigate(['/users'])\n  }\n\n  ngOnInit(): void {\n    const userId = this.route.snapshot.paramMap.get('userId')\n    if (userId) {\n      this.profile$ = this.profileService.getprofile(userId)\n    }\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { ProfileComponent } from './components/profile/profile.component'\nimport { AuthGuard } from '../core/guards/auth.guard'\n\nconst routes: Routes = [{ path: ':userId', component: ProfileComponent, canActivate: [AuthGuard] }]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfileRoutingModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\n\nimport { ProfileRoutingModule } from './profile-routing.module'\nimport { ProfileComponent } from './components/profile/profile.component'\nimport { ProfileService } from './services/profile.service'\n\n@NgModule({\n  declarations: [ProfileComponent],\n  imports: [CommonModule, ProfileRoutingModule],\n  providers: [ProfileService],\n})\nexport class ProfileModule {}\n","import { Injectable } from '@angular/core'\nimport { HttpClient } from '@angular/common/http'\nimport { environment } from '../../../environments/environment'\nimport { Observable } from 'rxjs'\nimport { Profile } from '../models/profile.model'\n\n@Injectable({\n  providedIn: null,\n})\nexport class ProfileService {\n  constructor(private http: HttpClient) {}\n\n  getprofile(id: string): Observable<Profile> {\n    return this.http.get<Profile>(`${environment.baseNetworkURL}/profile/${id}`)\n  }\n}\n"],"names":["i0","ProfileComponent","constructor","route","router","profileService","navigateToUsers","navigate","ngOnInit","userId","snapshot","paramMap","get","profile$","getprofile","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
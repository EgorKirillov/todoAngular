{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":";;;;;;;;;;;;;;;;AACsD;AACa;;;AAEnE,MAAM,MAAM,GAAW,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,6EAAc,EAAE,CAAC;AAMzD,MAAM,iBAAiB;;kFAAjB,iBAAiB;8GAAjB,iBAAiB;kHAHlB,kEAAqB,CAAC,MAAM,CAAC,EAC7B,yDAAY;mIAEX,iBAAiB,oFAFlB,yDAAY;;;;;;;;;;;;;;;;;;;;ACPsB;AAEW;AACU;AACf;;AAM7C,MAAM,UAAU;;oEAAV,UAAU;uGAAV,UAAU;2GAFX,yDAAY,EAAE,mEAAiB,EAAE,+DAAmB;mIAEnD,UAAU,mBAHN,6EAAc,aACnB,yDAAY,EAAE,mEAAiB,EAAE,+DAAmB;;;;;;;;;;;;;;;;;;;ACRU;;;;;;ICIpE,sEAAwC;IAAA,4EAAiB;IAAA,4DAAM;;;IAC/D,sEAAqC;IAAA,8EAAmB;IAAA,4DAAM;;;IAC9D,sEAAuC;IAAA,qFAA0B;IAAA,4DAAM;;;IAHzE,yEAA2E;IACzE,iHAA+D;IAC/D,iHAA8D;IAC9D,iHAAuE;IACzE,4DAAM;;;IAHE,0DAAgC;IAAhC,sIAAgC;IAChC,0DAA6B;IAA7B,mIAA6B;IAC7B,0DAA+B;IAA/B,qIAA+B;;;IAQrC,sEAA2C;IAAA,4EAAiB;IAAA,4DAAM;;;IAClE,sEAA4C;IAAA,mGAAwC;IAAA,4DAAM;;;IAF5F,yEAAoF;IAClF,kHAAkE;IAClE,kHAA0F;IAC5F,4DAAM;;;IAFE,0DAAmC;IAAnC,4IAAmC;IACnC,0DAAoC;IAApC,6IAAoC;;;ADPzC,MAAM,cAAc;IACzB,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAE5C,cAAS,GAAG,IAAI,4DAAgB,CAAC;YAC/B,KAAK,EAAE,IAAI,uDAAW,CAAC,EAAE,EAAE;gBACzB,4DAAgB;gBAChB,+DAAmB;gBACnB,8DAAkB,CAAC,2CAA2C,CAAC;aAChE,CAAC;YACF,QAAQ,EAAE,IAAI,uDAAW,CAAC,EAAE,EAAE,CAAC,gEAAoB,CAAC,CAAC,CAAC,EAAE,+DAAmB,CAAC,CAAC;YAC7E,UAAU,EAAE,IAAI,uDAAW,CAAC,IAAI,CAAC;SAClC,CAAC;IAV6C,CAAC;IAYhD,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC;QACvC,sCAAsC;IACxC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAE;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9C,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;IACtB,CAAC;;4EA7BU,cAAc;4GAAd,cAAc;QCT3B,0EAAsD;QAAxB,0IAAY,cAAU,IAAC;QACnD,sEAAK;QACgB,kEAAO;QAAA,4DAAQ;QAClC,sEAAuG;QACvG,0GAIM;QACR,4DAAM;QAEN,sEAAK;QACmB,oEAAS;QAAA,4DAAQ;QACvC,sEAA+F;QAC/F,4GAGM;QACR,4DAAM;QAEN,uEAAK;QACH,uEAAsE;QAAC,4EAAwB;QAAA,uEAAW;QAAA,4DAAQ;QAGpH,6EAQC;QACC,oEACF;QAAA,4DAAS;;QAlCL,oFAAuB;QAInB,0DAAqD;QAArD,6HAAqD;QAUrD,0DAA8D;QAA9D,sIAA8D;QAYpE,0DAA8B;QAA9B,2FAA8B","sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/components/login/login.component.ts","./src/app/auth/components/login/login.component.html"],"sourcesContent":["import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\nimport { LoginComponent } from './components/login/login.component'\n\nconst routes: Routes = [{ path: '', component: LoginComponent }]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\n\nimport { AuthRoutingModule } from './auth-routing.module'\nimport { LoginComponent } from './components/login/login.component'\nimport { ReactiveFormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [CommonModule, AuthRoutingModule, ReactiveFormsModule],\n})\nexport class AuthModule {}\n","import { Component, OnInit } from '@angular/core'\nimport { FormControl, UntypedFormGroup, Validators } from '@angular/forms'\nimport { AuthService } from '../../../core/services/auth.service'\n\n@Component({\n  selector: 'tdl-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  constructor(private authService: AuthService) {}\n\n  loginForm = new UntypedFormGroup({\n    email: new FormControl('', [\n      Validators.email,\n      Validators.required,\n      Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,5}$'),\n    ]),\n    password: new FormControl('', [Validators.minLength(4), Validators.required]),\n    rememberMe: new FormControl(null),\n  })\n\n  get email() {\n    return this.loginForm.controls['email']\n    // return this.loginForm.get('email')!\n  }\n\n  get password() {\n    return this.loginForm.get('password')!\n  }\n\n  onSubmit() {\n    console.log(this.loginForm.value)\n    this.authService.login(this.loginForm.value)\n  }\n\n  ngOnInit(): void {\n    console.log('login')\n  }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n  <div>\n    <label for=\"email\">Email: </label>\n    <input id=\"email\" type=\"text\" formControlName=\"email\" placeholder=\"enter email\" class=\"form-control\" />\n    <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"error\">\n      <div *ngIf=\"email.errors?.['required']\">Name is required.</div>\n      <div *ngIf=\"email.errors?.['email']\">Name must be email.</div>\n      <div *ngIf=\"email.errors?.['pattern']\">Name must be ****@****.**.</div>\n    </div>\n  </div>\n\n  <div>\n    <label for=\"password\">Password:</label>\n    <input id=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"enter password\" />\n    <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"error\">\n      <div *ngIf=\"password.errors?.['required']\">Name is required.</div>\n      <div *ngIf=\"password.errors?.['minlength']\">Name must be at least 6 characters long.</div>\n    </div>\n  </div>\n\n  <div>\n    <input id=\"rememberMe\" type=\"checkbox\" formControlName=\"rememberMe\" /> <label for=\"rememberMe\">Remember Me</label>\n  </div>\n\n  <button\n    type=\"submit\"\n    [disabled]=\"loginForm.invalid\"\n    [ngClass]=\"{\n      buttonError: loginForm.invalid,\n      buttonSuccess: loginForm.valid,\n      buttonUntouched: loginForm.untouched\n    }\"\n  >\n    submit\n  </button>\n</form>\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}